# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  guide(relativePath: String): Guide!
  guideConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GuideFilter): GuideConnection!
  case_study(relativePath: String): Case_study!
  case_studyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Case_studyFilter): Case_studyConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  feature(relativePath: String): Feature!
  featureConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FeatureFilter): FeatureConnection!
  compare(relativePath: String): Compare!
  compareConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CompareFilter): CompareConnection!
  news(relativePath: String): News!
  newsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NewsFilter): NewsConnection!
}

input DocumentFilter {
  guide: GuideFilter
  case_study: Case_studyFilter
  blog: BlogFilter
  feature: FeatureFilter
  compare: CompareFilter
  news: NewsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Guide | Case_study | Blog | Feature | Compare | News | Folder

type Guide implements Node & Document {
  title: String!
  slug: String
  published: Boolean
  excerpt: String!
  date: String!
  readTime: String!
  image: String
  imageAlt: String
  tags: [String]
  author: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input GuideFilter {
  title: StringFilter
  slug: StringFilter
  published: BooleanFilter
  excerpt: StringFilter
  date: DatetimeFilter
  readTime: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
  tags: StringFilter
  author: StringFilter
  body: RichTextFilter
}

type GuideConnectionEdges {
  cursor: String!
  node: Guide
}

type GuideConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GuideConnectionEdges]
}

type Case_studyResults {
  metric1: String
  metric2: String
  metric3: String
}

type Case_study implements Node & Document {
  title: String!
  slug: String
  published: Boolean
  excerpt: String!
  company: String
  industry: String
  date: String!
  readTime: String!
  image: String
  imageAlt: String
  results: Case_studyResults
  tags: [String]
  author: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Case_studyResultsFilter {
  metric1: StringFilter
  metric2: StringFilter
  metric3: StringFilter
}

input Case_studyFilter {
  title: StringFilter
  slug: StringFilter
  published: BooleanFilter
  excerpt: StringFilter
  company: StringFilter
  industry: StringFilter
  date: DatetimeFilter
  readTime: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
  results: Case_studyResultsFilter
  tags: StringFilter
  author: StringFilter
  body: RichTextFilter
}

type Case_studyConnectionEdges {
  cursor: String!
  node: Case_study
}

type Case_studyConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Case_studyConnectionEdges]
}

type Blog implements Node & Document {
  title: String!
  slug: String
  published: Boolean
  excerpt: String!
  date: String!
  readTime: String!
  image: String
  imageAlt: String
  tags: [String]
  category: String
  author: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BlogFilter {
  title: StringFilter
  slug: StringFilter
  published: BooleanFilter
  excerpt: StringFilter
  date: DatetimeFilter
  readTime: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
  tags: StringFilter
  category: StringFilter
  author: StringFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Feature implements Node & Document {
  title: String!
  slug: String
  published: Boolean
  featured: Boolean
  excerpt: String!
  date: String
  icon: String
  image: String
  imageAlt: String
  category: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FeatureFilter {
  title: StringFilter
  slug: StringFilter
  published: BooleanFilter
  featured: BooleanFilter
  excerpt: StringFilter
  date: DatetimeFilter
  icon: ImageFilter
  image: ImageFilter
  imageAlt: StringFilter
  category: StringFilter
  tags: StringFilter
  body: RichTextFilter
}

type FeatureConnectionEdges {
  cursor: String!
  node: Feature
}

type FeatureConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FeatureConnectionEdges]
}

type CompareProduct1 {
  name: String!
  logo: String
  url: String
}

type CompareProduct2 {
  name: String!
  logo: String
  url: String
}

type Compare implements Node & Document {
  title: String!
  slug: String
  published: Boolean
  excerpt: String!
  product1: CompareProduct1
  product2: CompareProduct2
  date: String!
  readTime: String!
  image: String
  imageAlt: String
  winner: String
  tags: [String]
  author: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CompareProduct1Filter {
  name: StringFilter
  logo: ImageFilter
  url: StringFilter
}

input CompareProduct2Filter {
  name: StringFilter
  logo: ImageFilter
  url: StringFilter
}

input CompareFilter {
  title: StringFilter
  slug: StringFilter
  published: BooleanFilter
  excerpt: StringFilter
  product1: CompareProduct1Filter
  product2: CompareProduct2Filter
  date: DatetimeFilter
  readTime: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
  winner: StringFilter
  tags: StringFilter
  author: StringFilter
  body: RichTextFilter
}

type CompareConnectionEdges {
  cursor: String!
  node: Compare
}

type CompareConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CompareConnectionEdges]
}

type News implements Node & Document {
  title: String!
  slug: String
  published: Boolean
  breaking: Boolean
  excerpt: String!
  date: String!
  readTime: String!
  image: String
  imageAlt: String
  source: String
  tags: [String]
  author: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NewsFilter {
  title: StringFilter
  slug: StringFilter
  published: BooleanFilter
  breaking: BooleanFilter
  excerpt: StringFilter
  date: DatetimeFilter
  readTime: StringFilter
  image: ImageFilter
  imageAlt: StringFilter
  source: StringFilter
  tags: StringFilter
  author: StringFilter
  body: RichTextFilter
}

type NewsConnectionEdges {
  cursor: String!
  node: News
}

type NewsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NewsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateGuide(relativePath: String!, params: GuideMutation!): Guide!
  createGuide(relativePath: String!, params: GuideMutation!): Guide!
  updateCase_study(relativePath: String!, params: Case_studyMutation!): Case_study!
  createCase_study(relativePath: String!, params: Case_studyMutation!): Case_study!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateFeature(relativePath: String!, params: FeatureMutation!): Feature!
  createFeature(relativePath: String!, params: FeatureMutation!): Feature!
  updateCompare(relativePath: String!, params: CompareMutation!): Compare!
  createCompare(relativePath: String!, params: CompareMutation!): Compare!
  updateNews(relativePath: String!, params: NewsMutation!): News!
  createNews(relativePath: String!, params: NewsMutation!): News!
}

input DocumentUpdateMutation {
  guide: GuideMutation
  case_study: Case_studyMutation
  blog: BlogMutation
  feature: FeatureMutation
  compare: CompareMutation
  news: NewsMutation
  relativePath: String
}

input DocumentMutation {
  guide: GuideMutation
  case_study: Case_studyMutation
  blog: BlogMutation
  feature: FeatureMutation
  compare: CompareMutation
  news: NewsMutation
}

input GuideMutation {
  title: String
  slug: String
  published: Boolean
  excerpt: String
  date: String
  readTime: String
  image: String
  imageAlt: String
  tags: [String]
  author: String
  body: JSON
}

input Case_studyResultsMutation {
  metric1: String
  metric2: String
  metric3: String
}

input Case_studyMutation {
  title: String
  slug: String
  published: Boolean
  excerpt: String
  company: String
  industry: String
  date: String
  readTime: String
  image: String
  imageAlt: String
  results: Case_studyResultsMutation
  tags: [String]
  author: String
  body: JSON
}

input BlogMutation {
  title: String
  slug: String
  published: Boolean
  excerpt: String
  date: String
  readTime: String
  image: String
  imageAlt: String
  tags: [String]
  category: String
  author: String
  body: JSON
}

input FeatureMutation {
  title: String
  slug: String
  published: Boolean
  featured: Boolean
  excerpt: String
  date: String
  icon: String
  image: String
  imageAlt: String
  category: String
  tags: [String]
  body: JSON
}

input CompareProduct1Mutation {
  name: String
  logo: String
  url: String
}

input CompareProduct2Mutation {
  name: String
  logo: String
  url: String
}

input CompareMutation {
  title: String
  slug: String
  published: Boolean
  excerpt: String
  product1: CompareProduct1Mutation
  product2: CompareProduct2Mutation
  date: String
  readTime: String
  image: String
  imageAlt: String
  winner: String
  tags: [String]
  author: String
  body: JSON
}

input NewsMutation {
  title: String
  slug: String
  published: Boolean
  breaking: Boolean
  excerpt: String
  date: String
  readTime: String
  image: String
  imageAlt: String
  source: String
  tags: [String]
  author: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
